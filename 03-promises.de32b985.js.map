{"mappings":"iiBAKA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,uBAChCC,EAASF,SAASC,cAAc,SAyBtC,SAASE,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAYtC,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,GACFI,EAAQ,CAAEN,WAAUC,UAGtBM,EAAO,CAAEP,WAAUC,S,GAClBA,E,IAjCPN,EAAOc,iBAAiB,SAExB,SAAkBC,GAChBA,EAAIC,iBACJC,QAAQC,IAAIH,GAEZ,IAAMI,EAAwBhB,EAAxBG,MAAOc,EAAiBjB,EAAjBiB,KAAMC,EAAWlB,EAAXkB,OACnBF,EAAQG,OAAOH,EAAMI,OACrB,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAOE,MAAOC,GAAK,EACtCpB,EAAcoB,EAAGL,GACdM,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,M,OACjBqB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAGjDyB,OAAM,SAAAL,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,M,OAClBqB,EAAA7B,GAAS8B,OAAOI,QAAQ,sBAAuCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAGzEa,GAASG,OAAOF,EAAKG,M","sources":["src/js/03-promises.js"],"sourcesContent":["// 1. Выполняй это задание в файлах 03-promises.html и 03-promises.js.\n// 2. В HTML есть разметка формы, в поля которой пользователь будет вводить {первую задержку} в миллисекундах, { шаг увеличения задержки} для каждого промиса после первого и {количество промисов} которое необходимо создать.\n// 3. Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и задержку учитывая введенную пользователем первую задержку (delay) и шаг (step).\n// 4. Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени. Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров. Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\nimport Notiflix from 'notiflix';\n\nconst submit = document.querySelector('button[type=submit]');\nconst formEl = document.querySelector('.form');\n\nsubmit.addEventListener('click', onSubmit);\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n  console.log(evt);\n\n  let { delay, step, amount } = formEl;\n  delay = Number(delay.value);\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) =>\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        )\n      )\n      .catch(({ position, delay }) =>\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n      );\n\n    delay += Number(step.value);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n\n  return promise;\n}\n\n// function onSubmit(evt) {\n//   evt.preventDefault();\n//   console.log(evt);\n\n//   let { delay, step, amount } = formEl;\n//   delay = Number(delay.value);\n//   for (let i = 1; i <= amount.value; i += 1) {\n//     createPromise(i, delay);\n\n//     delay += Number(step.value);\n//   }\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       }\n\n//       reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//     }, delay);\n//   });\n//   promise\n//     .then((result) => Notiflix.Notify.success(result))\n//     .catch((err) => Notiflix.Notify.failure(err));\n// }\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$submit","document","querySelector","$ce04d3a99e08e73b$var$formEl","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","console","log","delay1","step","amount","Number","value","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.de32b985.js.map"}